# -*- coding: utf-8 -*-
"""Converted_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_wbRDOJn35kTojuzSfhZYHrt9RGV0xKK
"""


import requests
from io import BytesIO
from PIL import Image
from datasets import load_dataset
import kagglehub
import os


os.makedirs("processed_data/original", exist_ok=True)
os.makedirs("processed_data/grayscale", exist_ok=True)

def save_images(image, grayscale_image, idx):
    try:
        #print(f"Processing image {idx}")

       
        if isinstance(image, str):
            image = Image.open(image).convert("RGB")
        elif isinstance(image, bytes):
            image = Image.open(BytesIO(image)).convert("RGB")
        elif not isinstance(image, Image.Image):
            raise ValueError(f"Unsupported image format: {type(image)}")

        # Mở ảnh grayscale
        if isinstance(grayscale_image, str):
            grayscale_image = Image.open(grayscale_image).convert("L")
        elif isinstance(grayscale_image, bytes):
            grayscale_image = Image.open(BytesIO(grayscale_image)).convert("L")
        elif not isinstance(grayscale_image, Image.Image):
            raise ValueError(f"Unsupported image format: {type(grayscale_image)}")

        # Lưu ảnh vào thư mục chung
        image.save(f"processed_data/original/image_{idx}.jpg")
        grayscale_image.save(f"processed_data/grayscale/image_{idx}.jpg")

    except Exception as e:
        print(f"Error processing image {idx}: {e}")

#coco_dataset = load_dataset("detection-datasets/coco", split="train")

# for idx, example in enumerate(coco_dataset):
#     grayscale_img = example["image"].convert("L") if isinstance(example["image"], Image.Image) else None
#     save_images(example["image"], grayscale_img, idx)

landscape_path = kagglehub.dataset_download("theblackmamba31/landscape-image-colorization")

color_path = os.path.join(landscape_path, "landscape Images/color")
gray_path = os.path.join(landscape_path, "landscape Images/gray")

color_images = sorted([f for f in os.listdir(color_path) if f.endswith(('.jpg', '.png', '.jpeg'))])
gray_images = sorted([f for f in os.listdir(gray_path) if f.endswith(('.jpg', '.png', '.jpeg'))])

assert len(color_images) == len(gray_images)

for idx, (color_file, gray_file) in enumerate(zip(color_images, gray_images)):
    color_file_path = os.path.join(color_path, color_file)
    gray_file_path = os.path.join(gray_path, gray_file)
    save_images(color_file_path, gray_file_path, idx)

print("Processing complete. Images saved in 'processed_data/'")